import keras
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from keras.layers import Dense
from keras.models import Sequential

def read_csv_data(path):
    df = pd.read_csv(path, names=['Target', 'feat1', 'feat2'])
    y_data = keras.utils.to_categorical(df.pop('Target'))
    x_data = np.array(df)
    return x_data, y_data

def build_model(input_dim, hidden_units, output_classes, lr=0.005):
    model = Sequential()
    init = keras.initializers.GlorotNormal(seed=12)
    model.add(Dense(hidden_units, input_shape=(input_dim,), activation='relu', kernel_initializer=init))
    model.add(Dense(output_classes, activation='softmax', kernel_initializer=init))
    optimizer = keras.optimizers.SGD(learning_rate=lr, momentum=0.95, nesterov=True)
    model.compile(optimizer=optimizer, loss='categorical_crossentropy')
    return model

if __name__ == '__main__':
    # –ì—ñ–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    lr = 0.005
    n_epochs = 200
    batch = 32  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä batch –¥–ª—è –ª—É—á—à–µ–π —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    hidden_layer_neurons = 16

    # –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∞—Å–µ—Ç—ñ–≤
    X_train, Y_train = read_csv_data('saturn_data_train.csv')
    X_test, Y_test = read_csv_data('saturn_data_eval.csv')  # –£–±—Ä–∞–Ω –ø—Ä–æ–±–µ–ª –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞

    keras.utils.set_random_seed(42)

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –Ω–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ
    classifier = build_model(input_dim=2, hidden_units=hidden_layer_neurons, output_classes=3, lr=lr)
    print(" –ù–∞–≤—á–∞–Ω–Ω—è —Ä–æ–∑–ø–æ—á–∞—Ç–æ...")
    history = classifier.fit(X_train, Y_train, epochs=n_epochs, batch_size=batch, verbose=1)
    print(" –ù–∞–≤—á–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

    # –û—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è:")
    classifier.evaluate(X_test, Y_test)

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ
    classifier.save("custom_saturn_model.keras")

    # –¢–µ—Å—Ç–æ–≤–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è
    test_point = np.array([[2, 3]])
    prediction = classifier.predict(test_point)
    print("\nüîç –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è —Ç–æ—á–∫–∏ (2, 3):", prediction)
    print("–ù–∞–ª–µ–∂–∏—Ç—å –¥–æ –∫–ª–∞—Å—É:", np.argmax(prediction))

    # –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è loss-–≥—Ä–∞—Ñ—ñ–∫—É
    plt.figure(figsize=(10, 6))
    plt.plot(history.history['loss'], color='blue')
    plt.title("–ì—Ä–∞—Ñ—ñ–∫ –≤—Ç—Ä–∞—Ç –ø—ñ–¥ —á–∞—Å –Ω–∞–≤—á–∞–Ω–Ω—è")
    plt.xlabel("–ï–ø–æ—Ö–∞")
    plt.ylabel("Loss")
    plt.grid(True)
    plt.show()

    # –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç—É
    plt.figure(figsize=(10, 8))
    scatter = plt.scatter(X_train[:, 0], X_train[:, 1],
                         c=np.argmax(Y_train, axis=1),
                         cmap='plasma',
                         alpha=0.6)
    plt.colorbar(scatter)
    plt.title("–ù–∞–≤—á–∞–ª—å–Ω–∏–π –¥–∞—Ç–∞—Å–µ—Ç (—Ä–æ–∑—Ñ–∞—Ä–±–æ–≤–∞–Ω–æ –ø–æ –∫–ª–∞—Å–∞—Ö)")
    plt.xlabel("X")
    plt.ylabel("Y")
    plt.grid(True)
    plt.show()
